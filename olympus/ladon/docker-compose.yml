version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: ladon-prometheus
    networks:
      - default
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0
    container_name: ladon-grafana
    networks:
      - default
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
      - ./config/grafana/dashboards/:/var/lib/grafana/dashboards/
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    networks:
      - default
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./config/loki/config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    networks:
      - default
    volumes:
      - /var/log:/var/log
      - ./config/promtail/config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    networks:
      - default
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    networks:
      - default
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    restart: unless-stopped

  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.3.0-3.2.0-ubuntu22.04
    container_name: dcgm-exporter
    networks:
      - default
    runtime: nvidia
    privileged: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, utility, compute]
    ports:
      - "${DCGM_EXPORTER_PORT:-9400}:9400"
    volumes:
      - /run/nvidia:/run/nvidia:ro
      - /var/run/dcgm:/var/run/dcgm:ro
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: ladon-postgres
    network_mode: host
    env_file:
      - ./config/env/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-phoenix}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_INITDB_ARGS=--auth-host=trust
    command: postgres -c listen_addresses='*'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  phoenix:
    image: ${PHOENIX_IMAGE:-arizephoenix/phoenix:latest}
    container_name: ladon-phoenix
    network_mode: host
    env_file:
      - ./config/env/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-phoenix}
      - POSTGRES_HOST=127.0.0.1
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - PHOENIX_PORT=${PHOENIX_PORT:-6006}
      - PHOENIX_GRPC_PORT=${PHOENIX_GRPC_PORT:-4317}
      - PHOENIX_PROMETHEUS_PORT=${PHOENIX_PROMETHEUS_PORT:-9091}
      - PHOENIX_ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${PHOENIX_PORT:-6006}:6006"
      - "${PHOENIX_GRPC_PORT:-4317}:4317"
      - "${PHOENIX_PROMETHEUS_PORT:-9091}:9091"
    volumes:
      - ./phoenix_logs:/app/logs
    working_dir: /phoenix
    entrypoint: ["/usr/bin/python3.11"]
    command: ["-m", "phoenix.server.main", "serve"]
    restart: unless-stopped

networks:
  default:
    name: ladon_default

volumes:
  prometheus_data:
  grafana_data:
  loki-data:
  postgres_data:
