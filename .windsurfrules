That’s a great point, and it emphasizes the need for a modular approach to integrating model management tools. Here’s how we can refine the rules to reflect that vision:

---

### **Updated Rules to Build Olympus With**

1. **Use Python Exclusively**:
   - Use Python for both front-end and back-end development to simplify maintenance and keep everything within a single language stack.

2. **Utility-Driven Modularity**:
   - Encapsulate reusable logic in utility files (e.g., `memory.py`, `inference.py`, `verifier.py`, `logger.py`).
   - Utility files must:
     - Remain functional in nature.
     - Be independent of other application modules.
     - Avoid embedding business logic, which belongs in application scripts.

3. **Stateless First**:
   - Design the application to be stateless initially, leveraging `tmpfs` for temporary data storage.
   - Introduce statefulness only when necessary for advanced workflows or persistent user sessions.

4. **Incremental Development**:
   - Build backend utility files first, with 100% unit test coverage before moving to the next.
   - Conduct backend integration testing after all modules are complete.

5. **Future-Ready Design**:
   - Modularize components to support:
     - The integration of new model management tools like Ollama.
     - Custom model management solutions.
   - Abstract model interaction logic to allow swapping or extending tools with minimal changes to the codebase.

6. **Documentation**:
   - Include a `README.md` in every directory with usage instructions.
   - All files must include clear docstrings and inline comments explaining their purpose and usage.

7. **Testing Standards**:
   - Use `pytest` for unit, integration, and end-to-end testing.
   - Cover edge cases and simulate real-world interactions.

8. **Dependency Management**:
   - Use Poetry for managing dependencies and packaging.
   - Maintain a `pyproject.toml` file to lock versions and ensure consistency.

9. **Version Control**:
   - Use Git with a branching strategy (e.g., GitFlow) to manage changes systematically.
   - Write meaningful commit messages and pull request descriptions.

10. **Error Handling**:
    - Ensure all utility functions handle edge cases gracefully to prevent application crashes.
    - Log exceptions with sufficient detail for debugging, including timestamps, module names, and stack traces.

11. **Unified Logging**:
    - All modules must use the centralized `logger.py` utility for consistent logging.
    - Log meaningful events at appropriate levels (INFO, DEBUG, ERROR) to aid debugging and monitoring.

12. **Performance Optimization**:
    - Optimize code and application structure for memory usage and response times.
    - Test for scalability, even if the current user base is small.

13. **Version Compatibility**:
    - Maintain a consistent development environment using tools like `poetry.lock` or Docker.
    - Ensure compatibility with specified Python versions and dependencies.

14. **Extensible Model Management**:
    - Abstract model interactions into a dedicated `model_manager.py` utility to support:
      - LMStudio, Ollama, and other third-party model management tools.
      - Custom model management solutions.
    - Start with LMStudio integration and design the interface to support adding new tools seamlessly.